#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Apr 28 14:27:15 2020

@author: josephgross
"""


from abc import ABCMeta, abstractmethod
import datetime
try:
    import Queue as queue
except ImportError:
    import queue
    
from event import FillEvent, OrderEvent


class ExecutionHandler(object):
    """
    The ExecutionHandler abstract class handles the interaction
    between a set of order points generated by a Portfolio and 
    the ultimate set of Fill objects that actually occur in the 
    market.
    
    The handlers can be used to subclass simulated brokerages
    or live brokerages, with identical interfaces. This allows 
    strategies to be backtested in a very similar manner to the
    live trading engine.
    
    This ExcecutionHandler is very simple, because it only fills 
    all orders at the current market price. Different types of 
    orders such as stop-loss or limit orders can be dealt with 
    here.
    
    """
    
    @abstractmethod
    def excecute_order(self, event):
        """
        Takes an Order event and excecutes it, producing a
        Fill Event that gets placed onto the Events queue.

        Parameters
        ----------
        event : 'Event'
            An Event object with order information.

        Returns
        -------
        None.

        """
        
        raise NotImplementedError("Should implement execute_order()")
        
        

class SimulatedExecutionHandler(ExecutionHandler):
    """
    The simulated execution handler simply converts all order
    objects into their equivalnt fill objects automatically without
    latency, slippage, or fill-ratio issues. 
    
    This allows a straightforward "first go" test of any strategy, 
    before implementation with a more sophisticated execution handler.
    
    This handler will simply fill all orders at markt price.
    """
    
    def __init__(self, events):
        """
        Initializes the handler, setting the event queues up
        internally.

        Parameters
        ----------
        events : 'Queue'
            The Queue of Event objects.

        Returns
        -------
        None.

        """
        
        self.events = events
        
    
    def execute_order(self, event):
        """
        Simply converts Order objects into Fill objects naively, 
        i.e. without any latency, slippage, or fill ratio problems.

        Parameters
        ----------
        event : 'Event'
            Contains an Event object with order information.

        Returns
        -------
        None.

        """
        
        if event.type == 'ORDER':
            fill_event = FillEvent(
                datetime.datetime.utcnow(), event.symbol, 
                'ARCA', event.quantity, event.direction, None
            )
            self.events.put(fill_event)