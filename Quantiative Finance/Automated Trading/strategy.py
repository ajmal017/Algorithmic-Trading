#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Apr 24 09:47:44 2020

@author: josephgross
"""


from abc import ABCMeta, abstractmethod
import datetime
try:
    import Queue as queue
except ImportError:
    import queue
    
import numpy as np
import pandas as pd

from event import SignalEvent


class Strategy(object):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.
    
    The goal of a (derived) Strategy objct is to generatae Signal
    objects for particular symbols based on the inputs of Bars (OHLCV)
    generated by a DataHandler object.
    
    This is designed to work with both historic and live data as the 
    Strategy object is agnostic to where the data came from, since it 
    obtains the bar tuples from a queue object.
    
    The Strategy object encapsulates all calculations on market data
    that generate advisory signals to a portfolio object. All of the 
    "strategy logic" resides within this class.
    """
    
    __metaclass__ = ABCMeta
    
    @abstractmethod
    def calculate_signals(self):
        """
        Provides the mechanisms to calculate the list of signals.

        """
        
        raise NotImplementedError("Should implement calculate_signals()")
    